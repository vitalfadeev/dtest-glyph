Paint mapping.
==============

The paints can be grouped depending on how many dimensions they have.

Solid color, has zero dimensions, it is the same everywhere.
Linear gradient, has one dimension, it varies only along one axis
Radial gradient, texture fill, are two dimensional, they vary along two axes

For radial and anglular you convert the distances along each axes to either a radius or an angle. For texture fill they provide a offset into the texture.

1 dimensional.
==============

defined by 2 points, (x0,y0) --> (x1,y1), so...

w = x1-x0
h = y1-y0

x = x0 + t*w
y = y0 + t*h

So that defines the axis along which the paint varies, with t=0 at x0,y0 and t=1 at x1,y1. 

We want to find the paint color for point (x2,y2), and we do this by drawing a line through (x2,y2) that is perpendicular to the line (x0,y0)-->(x1,y1). And we look for the value of 't' at the intersection of these two lines... The perpendicular line is thus...

x = x2 + u*h
y = y2 - u*w

And if we are looking for the intersection then...

i) x0 + t*w = x2 + u*h
ii) y0 + t*h = y2 - u*w

rearange i)

u = (x0 + t*w - x2) / h

sub that into ii)

y0 + t*h = y2 - (x0 + t*w - x2)*w/h
y0 + t*h = y2 - (x0 - x2)*w/h - t*w*w/h
t*h + t*w*w/h = y2 - y0 - (x0 - x2)*w/h
t*h + t*w*w/h = y2 - y0 - (x0 - x2)*w/h
t*h*h + t*w*w = (y2 - y0)*h - (x0 - x2)*w
t(h^2 + w^2) =  (y2 - y0)*h - (x0 - x2)*w
t = ((y2 - y0)*h + (x2 - x0)*w) / (h^2 + w^2)

So we have a way to evalute 't' for any point. We can split that equation up and pull some stuff out that can be precomputed and it makes a bit more intuative / useful for what we need...

stepx = w / (w^2 + h^2) 
stepy = h / (w^2 + h^2) 

t = (x2-x0)*stepx + (y2-y0)*stepy

2 dimensions.
=============

For this you define two axes and calculate 't' seprately for each. So...

axis 0:

x0,y0 --> x1,y1
w0 = x1-x0
h0 = y1-y0
x = x0 + t0 * w0
y = y0 + t0 * h0

point of interest ==> qx,qy

we need to draw a line through x,y, parallel to axis 1, and evaluate 't0' where that line intersects with axis 0

x = qx + u * w1
y = qy + u * h1

set those equal to the equation for axis 0

i) qx + u * w1 = x0 + t0 * w0
ii) qy + u * h1 = y0 + t0 * h0

rearange ii) and sub into i), then rearange to get t0

u  = (y0 + t0 * h0 - qy) / h1

qx*h1 + w1 * (y0 + t0 * h0 - qy) = x0*h1 + t0*w0*h1
qx*h1 + w1*y0 + w1*t0 * h0 - w1*qy = x0*h1 + t0*w0*h1
w1*t0 * h0 - t0*w0*h1 = x0*h1 - qx*h1 - w1*y0 + w1*qy
t0(w1*h0 - w0*h1) = h1(x0-qx) + w1(qy-y0)
t0 = (h1(x0-qx) + w1(qy-y0)) / (w1*h0 - w0*h1)

stepx0 = h1 / (w1*h0 - w0*h1)
stepy0 = w1 / (w1*h0 - w0*h1)

t0 = (x0-qx)*stepx0 + (qy-y0)*stepy0

axis 1:

x0,y0 --> x2,y2
w1 = x2-x0
h1 = y2-y0
x = x0 + t1 * w1
y = y0 + t1 * h1

point of interest ==> qx,qy

and we need to draw a line through x,y, parallel to axis 0, and evaluate 't1' where that line intersects with axis 1

x = qx + u * w0
y = qy + u * h0

set those equal to the equation for axis 1

i) qx + u * w0 = x0 + t1 * w1
ii) qy + u * h0 = y0 + t1 * h1

rearange ii) and sub into i), then rearange to get t1

u  = (y0 + t1 * h1 - qy) / h0

qx + w0 * (y0 + t1 * h1 - qy) / h0 = x0 + t1 * w1
qx*h0 + w0 * (y0 + t1 * h1 - qy) = x0*h0 + t1 * w1*h0
qx*h0 + w0*y0 + w0*t1*h1 - w0*qy = x0*h0 + t1 * w1*h0
w0*t1*h1- t1 * w1*h0= x0*h0 - qx*h0 - w0*y0 + w0*qy
t1(w0*h1 - w1*h0) = h0(x0-qx) + w0(qy-y0)
t1 = (h0(x0-qx) + w0(qy-y0)) / (w0*h1 - w1*h0)

stepx1 = h0 / (w0*h1 - w1*h0)
stepy1 = w0 / (w0*h1 - w1*h0)

t1 = (x0-qx)*stepx1 + (qy-y0)*stepy1










For this you just define two axes and calculate 't' seprately for each. So...

axis 0 : (x0,y0) --> (x1,y1)
axis 1 : (x0,y0) --> (x2,y2)

Probably you want the two axes to be at right angles and to share (x0,y0) but there's no reason they have to do that.

w0 = x1-x0
h0 = y1-y0

stepx0 = w0 / (w0^2 + h0^2) 
stepy0 = h0 / (w0^2 + h0^2) 

t0 = (x2-x0)*stepx0 + (y2-y0)*stepy0

w1 = x1-x0
h1 = y1-y0

stepx1 = w1 / (w1^2 + h1^2) 
stepy1 = h1 / (w1^2 + h1^2) 

t1 = (x2-x0)*stepx1 + (y2-y0)*stepy1

for texture paint you use t0,t1 to map into the texture
for radial paint r = sqrt(t0^2+t1^2) maps to the gradient
for angular paint a = atan2(t1,t0) maps to the gradient
